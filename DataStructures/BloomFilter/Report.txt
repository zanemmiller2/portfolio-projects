Author: Zane Miller
Date: 04/13/2022
Email: millzane@oregonstate.edu
Description: Report on Bloom Filter implementation

  When I first began thinking about this project, I didn't know much about Bloom Filters. I then began looking up what data structure would be best to implement a bloom filter and almost immediately learned that a bloom filter is a data structure of its own implemented in part with a hash table.
  I wanted to implement my bloom filter as a Class Object with hopes of being able to scale it out in the future. I wanted to provide basic functionality (or at least the framework to) that would make scaling up easy in the future.
  What I find intriguing about the Bloom Filter is its relatively low space complexity. I opted to store the dictionary and password list to check as arrays to make accessing the values easier in testing. I think another implementation I will add in the future is a function that will calculate the other parameters based on the user predefining certain non-negotiable parameters. I also implemented functionality that would test whether the result is a false positive, false negative, or not by checking if the word is actually in the bad password list.
  This functionality could easily be implemented as binary search tree to improve speed. This is another intriguing aspect of bloom filters: they can easily be adapted to other implementations or incorporate multiple data structures to improve functionality. I think one of the other more powerful aspects of a Bloom Filter is, it is a great tool if you need to check the integrity of data but do not need to be 100% accurate. The bloom filter is also very easy, once built, to modify parameters to adapt it to a wide range of applications. In short, bloom filters are flexible, scalable, and can be modular.
  I wouldnt say there were any huge surprises working through this programming project. The functionality of a bloom filter is pretty intuitive. I was more interested with the idea of a bloom filter as a data structure and explored it from there.
