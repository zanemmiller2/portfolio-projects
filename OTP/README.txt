Author: Zane Miller
Date: 05/02/2022
Email: millzane@oregonstate.edu
Resources/APIs:
	- https://pyauth.github.io/pyotp/
	- https://pythonhosted.org/PyQRCode/
	- TOTP: Time-Based One-Time Password Algorithm


1. Install modules
	- pip install pyotp 
	- pip install pyqrcode


2. HOW TO RUN:
	- To generate QR code:

		python3 -c 'import googleAUTH; googleAUTH.generate_qr()'

	- To get current OTP:

		python3 -c 'import googleAUTH; googleAUTH.get_otp()'
	
	-- Optionally the program can be run to generate the QR Code and begin printing the OTP in loop automatically as:

		python3 googleAUTH.py 


	** get_otp() will run infinetly displaying the new OTP in time sync with the Google Authenticator app on IOS.

I did not have access to an Android Device and could not test with Google Auth on Android. 


Description:
	I implemented four Python functions: 
		1. generate_secret_key() that generates a 16 character (256 bit) base32 secret_key compatable with Google Authenticator used in generating the encoded URI.

		2. encode_uri() that encodes and returns the provisioning URI to parse for Google Authenticator with predefined 									account_name = ('HAL9000@2001.SpaceOdyssey.com') and issuer_name = '('Discovery 1')

		3. generate_qr() that generates a QR code from the encoded URI and prints the QR code to the terminal window. 

		4. get_otp() prints the OTP which will match the OTP generated by Google Authenticator. It prints the OTP when initially called and then again each time it changes in sync with the Google Authenticator mobile app. 

	- Users can either choose to run the generate_qr() and get_otp() functions with individual calls or have the two functions run automatically with a single call using the syntax in "HOW TO RUN".
	

